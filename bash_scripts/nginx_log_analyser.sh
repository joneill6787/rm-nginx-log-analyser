#!/bin/bash

#
#   Record the following:
#       Top 5 IP addresses with the most requests [Done]
#       Top 5 most requested paths
#       Top 5 response status codes
#       Top 5 user agents
#   

#Variable declarations
DIR="$( cd "$( dirname "${BASH_SOURCE[1]}" )" && pwd )"
NGINX_LOG_FILE_LOC="$DIR/../logs/nginx-access.log"


declare -a nginxIPAddresses
declare -a nginxDaT
declare -a nginxReqMethodPath
declare -a nginxRespStatCode
declare -a nginxRespSize
declare -a nginxReferrer
declare -a nginxUserAgent


#Check if log file exists
if [ ! -f "$NGINX_LOG_FILE_LOC" ]; then
    echo "Error: nginx log file not found at $JAR_FILE"
    exit 1
fi

function splitNGINXLogfile() {
    #Import logfile and store in array.
    mapfile -t nginxArray < "$NGINX_LOG_FILE_LOC"

    BREAKCHECK=0

    for element in "${nginxArray[@]}"; do
        
            # Split based on blank space
        ipAddress=$(echo "$element" | cut -d' ' -f1)
        reqMethodPath=$(echo "$element" | cut -d'"' -f2)
        respStatCodeRAW=$(echo "$element" | cut -d'"' -f3)
        respStatCodeFinal=$(echo "$respStatCodeRAW" | cut -d' ' -f2)
        userAgent=$(echo "$element" | cut -d'"' -f6)
        
        # echo $respStatCodeFinal
        nginxIPAddresses+=("$ipAddress")
        nginxReqMethodPath+=("$reqMethodPath")
        nginxRespStatCode+=("$respStatCodeFinal")
        nginxUserAgent+=("$userAgent")

        # echo "Entry: ${nginxRespStatCode[$BREAKCHECK]}"
        BREAKCHECK=$((BREAKCHECK + 1))
    #    if [[ $BREAKCHECK -ge 100 ]]; then
    #        break
    #    fi
    done

}
function countUserAgent(){
    declare -A userAgentCount

    for key in "${nginxUserAgent[@]}"; do
        ((userAgentCount["$key"]++))
    done  

    echo -e "\n == User counts == "
    for key in "${!userAgentCount[@]}"; do
        echo -e "${userAgentCount[$key]} \t | User Agent: $key"
    done | sort -nr | head -5 # |cut -d "(" -f 1

}

function countResponseStatCode(){
    declare -A responseStatCodeCount

    for key in "${nginxRespStatCode[@]}"; do
        ((responseStatCodeCount["$key"]++))
    done  

    echo -e "\n == Response Code counts == "
    for key in "${!responseStatCodeCount[@]}"; do
        echo -e "${responseStatCodeCount[$key]} \t | Respone Code: $key"
    done | sort -nr | head -5

}


function countIPAddresses(){
    declare -A ip_counts

    # Count occurrences
    for ip in "${nginxIPAddresses[@]}"; do
        ((ip_counts["$ip"]++))
    done
    
    echo -e "\n == IP Address occurrence counts == "
    for ip in $(for key in "${!ip_counts[@]}"; do
        echo "${ip_counts[$key]} $key"
    done | sort -nr | head -5 | cut -d' ' -f2); do
        echo "${ip_counts[$ip]}: $ip"
    done 
}


function countMostRequestedPaths(){
    declare -A reqMetPath_counts

    # Count occurrences
    for key in "${nginxReqMethodPath[@]}"; do
        ((reqMetPath_counts["$key"]++))
    done

        # -- The following line prints the "Keys" of an associated Array
    # echo "echo reqMetPath_counts[@]: ${!reqMetPath_counts[@]}"
        # -- The folloiwng line prints the "Value" of the associated Array
    # echo "echo reqMetPath_counts[@]: ${reqMetPath_counts[@]}"

    echo -e "\n == Top 5 Requested Method Paths =="
        # -- The following was generated by Claude.ai
#    for key in "${!reqMetPath_counts[@]}"; do
#        printf "%s\t%s\n" "${reqMetPath_counts[$key]}" "$key"
#    done | sort -nr | head -5 | awk -F'\t' '{print NR,$1 ": " $2}'

        # -- This is my own code. I dont include awk as I feel sort alone will
        # -- provide me with what I need already.

    for key in "${!reqMetPath_counts[@]}"; do
        echo -e "${reqMetPath_counts[$key]} \t | Requested Method Path:  $key"
    done | sort -nr | head -5
}

    ## Function Calls

splitNGINXLogfile

countIPAddresses
countMostRequestedPaths
countResponseStatCode
countUserAgent